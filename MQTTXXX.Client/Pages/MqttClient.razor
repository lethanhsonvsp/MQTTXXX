@page "/mqtt"
@rendermode InteractiveAuto
@using MQTTXXX.Shared
@using MudBlazor
@using Newtonsoft.Json
@inject MqttServiceClient MqttService
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudText Typo="Typo.h3" Class="mb-4">Bảng điều khiển MQTT Client</MudText>
<MudGrid>
    <!-- Cột trái: Kết nối, Đăng ký, Gửi tin -->
    <MudItem xs="12" md="5">
        <MudExpansionPanels Elevation="1" Class="mb-4">
            <!-- Connection -->
            <MudExpansionPanel Text="Kết nối" IsExpanded="true">
                <MudTextField @bind-Value="MqttService.Connection.BrokerUri" Label="URI Broker" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-2" />
                <MudNumericField @bind-Value="MqttService.Connection.Port" Label="Cổng" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-2" />
                <MudTextField @bind-Value="MqttService.Connection.ClientId" Label="ID Client" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-2" />
                <MudTextField @bind-Value="MqttService.Connection.Username" Label="Tên người dùng" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-2" />
                <MudTextField @bind-Value="MqttService.Connection.Password" Label="Mật khẩu" InputType="InputType.Password" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-2" />
                <MudStack Row="true" Spacing="2">
                    <MudButton OnClick="MqttService.ConnectAsync" Variant="Variant.Filled" Color="Color.Primary">Kết nối</MudButton>
                    <MudButton OnClick="MqttService.DisconnectAsync" Disabled="@(!MqttService.ConnectionStatus)" Variant="Variant.Filled" Color="Color.Secondary">Ngắt kết nối</MudButton>
                </MudStack>
                <MudText Class="mt-2">Trạng thái: <span class="@(MqttService.ConnectionStatus ? "text-success" : "text-error")">@(MqttService.ConnectionStatus ? "Đã kết nối" : "Chưa kết nối")</span></MudText>
            </MudExpansionPanel>

            <!-- Publish -->
            <MudExpansionPanel Text="Gửi tin">
                <MudSelect @bind-Value="MqttService.Message.Topic" Label="Chủ đề" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-2">
                    <MudSelectItem Value="@("")"> </MudSelectItem>
                    @foreach (var topic in MqttService.PredefinedTopics)
                    {
                        <MudSelectItem Value="@topic">@topic</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField @bind-Value="MqttService.Message.Payload" Label="Nội dung (JSON đơn hoặc mảng JSON)" Variant="Variant.Outlined" Lines="25" Margin="Margin.Dense" Class="mb-2" />
                <MudStack Row="true" Spacing="2" Class="mb-2">
                    <MudButton OnClick="MqttService.PublishAsync" Disabled="@MqttService.IsPublishing" Variant="Variant.Filled" Color="Color.Primary">Gửi</MudButton>
                    <MudButton OnClick="MqttService.ClearPayload" Variant="Variant.Outlined" Color="Color.Secondary">Xóa</MudButton>
                    <MudButton OnClick="MqttService.FormatPayload" Variant="Variant.Outlined" Color="Color.Info">Định dạng JSON</MudButton>
                    <MudButton OnClick="MqttService.ValidatePayload" Variant="Variant.Outlined" Color="Color.Warning">Kiểm tra JSON</MudButton>
                </MudStack>
                @if (MqttService.IsPublishing)
                {
                    <MudProgressLinear Value="@((MqttService.PublishProgress * 100))" Color="Color.Primary" Class="mb-2" />
                }
                @if (MqttService.PublishResults.Any())
                {
                    <MudAlert Severity="@(MqttService.PublishResults.Any(r => !r.Success) ? Severity.Warning : Severity.Success)" Class="mb-2">
                        <MudText><strong>Kết quả gửi (@MqttService.PublishResults.Count):</strong></MudText>
                        <MudList T="(bool Success, string Message)">
                            @foreach (var result in MqttService.PublishResults.Take(5))
                            {
                                <MudListItem T="(bool Success, string Message)" Class="@(result.Success ? "text-success" : "text-error")">@result.Message</MudListItem>
                            }
                            @if (MqttService.PublishResults.Count > 5)
                            {
                                <MudListItem T="(bool Success, string Message)"><MudLink OnClick="ShowAllResults">Xem tất cả...</MudLink></MudListItem>
                            }
                        </MudList>
                        <MudButton OnClick="MqttService.ClearPublishResults" Variant="Variant.Text" Color="Color.Default">Đóng</MudButton>
                    </MudAlert>
                }
            </MudExpansionPanel>

            <!-- Đăng ký -->
            <MudExpansionPanel Text="@($"Đăng ký ({MqttService.SubscribedTopics.Count} chủ đề)")">
                <div class="row">
                    @foreach (var topic in MqttService.PredefinedTopics)
                    {
                        <div class="col-6 mb-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="@topic" checked="@MqttService.SubscribedTopics.Contains(topic)" @onchange="@(e => MqttService.ToggleSubscribeAsync(topic, e.Value != null && (bool)e.Value))" />
                                <label class="form-check-label" for="@topic">@topic</label>
                            </div>
                        </div>
                    }
                </div>
                <MudStack Row="true" Spacing="2" Class="mt-2">
                    <MudButton OnClick="MqttService.SubscribeAllAsync" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">Đăng ký tất cả</MudButton>
                    <MudButton OnClick="MqttService.UnsubscribeAllAsync" Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small">Hủy đăng ký tất cả</MudButton>
                </MudStack>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>

    <!-- Cột phải: Tin nhắn -->
    <MudItem xs="12" md="7">
        <MudCard Elevation="1" Class="full-height">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText>Tin nhắn mới nhất</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (MqttService.LatestMessages.Any())
                {
                    @foreach (var kvp in MqttService.LatestMessages.OrderBy(m => m.Key))
                    {
                        <MudPaper Elevation="1" Class="json-message pa-3 mb-2" Key="@kvp.Key">
                            @if (kvp.Key == "state" && kvp.Value is StateMessage stateData)
                            {
                                <MudText Typo="Typo.body2" Class="json-header">
                                    <br />
                                    <strong>Topic:</strong> @kvp.Key<br />
                                    <strong>Timestamp:</strong> @(stateData.OrderData?.Timestamp ?? "N/A")<br/>
                                    <strong>Order ID:</strong> @(stateData.OrderData?.OrderId ?? "N/A")<br />
                                    <strong>Order Update ID:</strong> @(stateData.OrderData?.OrderUpdateId ?? 0)<br />
                                    <strong>Last Node ID:</strong> @(stateData.OrderData?.LastNodeId ?? "N/A")<br />
                                    <strong>Driving:</strong> @(stateData.OrderData?.Driving ?? false)<br />
                                    <strong>Paused:</strong> @(stateData.OrderData?.Paused ?? false)<br />
                                    <strong>New Base Request:</strong> @(stateData.OrderData?.NewBaseRequest ?? false)<br />
                                </MudText>
                                <MudTabs Elevation="1" Rounded="true" ApplyEffectsToContainer="true" Class="state-tabs mt-2 mb-2">
                                    <MudTabPanel Text="Action States" OnClick="@(() => SetActiveTab("ActionStates"))" Active="@(activeTab == "ActionStates")">
                                        @if (stateData.ActionStates != null && stateData.ActionStates.Any())
                                        {
                                            <MudList T="ActionState">
                                                <br />
                                                @foreach (var action in stateData.ActionStates)
                                                {
                                                    <MudListItem T="ActionState">
                                                        <MudText Typo="Typo.body2">
                                                            <strong>Action ID:</strong> @(action.ActionId ?? "N/A")<br />
                                                            <strong>Type:</strong> @(action.ActionType ?? "N/A")<br />
                                                            <strong>Status:</strong> @(action.ActionStatus ?? "N/A")<br />
                                                            <strong>Description:</strong> @(action.ActionDescription ?? "N/A")<br />
                                                            <strong>Result:</strong> @(action.ResultDescription ?? "N/A")
                                                        </MudText>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        }
                                        else
                                        {
                                            <br />
                                            <MudText>Không có Action States.</MudText>
                                        }
                                    </MudTabPanel>
                                    <MudTabPanel Text="Battery State" OnClick="@(() => SetActiveTab("BatteryState"))" Active="@(activeTab == "BatteryState")">
                                        @if (stateData.BatteryState != null)
                                        {
                                            <MudText Typo="Typo.body2">
                                                <br />
                                                Charge: @(stateData.BatteryState.BatteryCharge.ToString("F2"))% <br />
                                                Voltage: @(stateData.BatteryState.BatteryVoltage.ToString("F2"))V<br />
                                                Charging: @(stateData.BatteryState.Charging)
                                            </MudText>
                                        }
                                        else
                                        {
                                            <br />
                                            <MudText>Không có Battery State.</MudText>
                                        }
                                    </MudTabPanel>
                                    <MudTabPanel Text="Errors" OnClick="@(() => SetActiveTab("Errors"))" Active="@(activeTab == "Errors")">
                                        @if (stateData.Errors != null && stateData.Errors.Any())
                                        {
                                            <MudList T="Error">
                                                <br />
                                                @foreach (var error in stateData.Errors)
                                                {
                                                    <MudListItem T="Error">
                                                        <MudText Typo="Typo.body2">
                                                            <strong>Type:</strong> @(error.ErrorType ?? "N/A")<br />
                                                            <strong>Description:</strong> @(error.ErrorDescription ?? "N/A")<br />
                                                            <strong>Level:</strong> @(error.ErrorLevel ?? "N/A")
                                                        </MudText>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        }
                                        else
                                        {
                                            <br />
                                            <MudText>Không có Errors.</MudText>
                                        }
                                    </MudTabPanel>
                                    <MudTabPanel Text="Information" OnClick="@(() => SetActiveTab("Information"))" Active="@(activeTab == "Information")">
                                        @if (stateData.Information != null && stateData.Information.Any())
                                        {
                                            <MudList T="Information">
                                                <br />
                                                @foreach (var info in stateData.Information)
                                                {
                                                    <MudListItem T="Information">
                                                        <MudText Typo="Typo.body2">
                                                            <strong>Type:</strong> @(info.InfoType ?? "N/A")<br />
                                                            <strong>Description:</strong> @(info.InfoDescription ?? "N/A")<br />
                                                            <strong>Level:</strong> @(info.InfoLevel ?? "N/A")
                                                        </MudText>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        }
                                        else
                                        {
                                            <br />
                                            <MudText>Không có Information.</MudText>
                                        }
                                    </MudTabPanel>
                                </MudTabs>
                            }
                            else if (kvp.Key == "visualization" && kvp.Value is VisualizationData visualization)
                            {
                                <MudText Typo="Typo.body2" Class="json-header">
                                    <br />
                                    <strong>Topic:</strong> @kvp.Key<br />
                                    <strong>HeaderId:</strong> @(visualization.HeaderId)<br />
                                    <strong>Timestamp:</strong> @(visualization.Timestamp ?? "N/A")<br />
                                    <strong>Version:</strong> @(visualization.Version ?? "N/A")<br />
                                    <strong>Manufacturer:</strong> @(visualization.Manufacturer ?? "N/A")<br />
                                    <strong>SerialNumber:</strong> @(visualization.SerialNumber ?? "N/A")<br />
                                    <strong>MapId:</strong> @(visualization.MapId ?? "N/A")<br />
                                    <strong>MapDescription:</strong> @(visualization.MapDescription ?? "N/A")<br />
                                    <strong>Vị trí:</strong> X: @(visualization.AgvPosition?.X.ToString("F2") ?? "N/A"), Y: @(visualization.AgvPosition?.Y.ToString("F2") ?? "N/A"), Theta: @(visualization.AgvPosition?.Theta.ToString("F2") ?? "N/A")<br />
                                    <strong>Tốc độ:</strong> Vx: @(visualization.Velocity?.Vx.ToString("F2") ?? "N/A"), Vy: @(visualization.Velocity?.Vy.ToString("F2") ?? "N/A"), Omega: @(visualization.Velocity?.Omega.ToString("F2") ?? "N/A")
                                </MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Class="json-header">
                                    <strong>Chủ đề:</strong> @kvp.Key
                                </MudText>
                                <MudText Typo="Typo.body2" Class="json-payload">
                                    <strong>Nội dung:</strong>
                                    <MudPaper Class="json-details pa-2">
                                        <pre>@(kvp.Value is MqttMessage msg ? MqttService.FormatJson(msg.Payload) : JsonConvert.SerializeObject(kvp.Value, Formatting.Indented))</pre>
                                    </MudPaper>
                                </MudText>
                            }
                        </MudPaper>
                    }
                }
                else
                {
                    <MudText Class="pa-3">Chưa nhận được tin nhắn.</MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private string activeTab = "ActionStates";
    private bool showAllResults = false;

    protected override async Task OnInitializedAsync()
    {
        await MqttService.InitializeAsync();
        MqttService.StateChanged += StateHasChanged;
    }

    private async Task ShowAllResults()
    {
        showAllResults = true;
        await InvokeAsync(StateHasChanged);
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    public void Dispose()
    {
        MqttService.StateChanged -= StateHasChanged;
    }
}

<style>
    .full-height {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .json-message {
        border-radius: 4px;
        margin-bottom: 16px;
    }

    .json-header {
        margin-bottom: 8px;
    }

    .json-payload {
        margin-top: 8px;
    }

    .json-details {
        background-color: #f5f5f5;
        padding: 8px;
        border-radius: 4px;
        font-family: monospace;
        font-size: 12px;
        white-space: pre-wrap;
    }

    .state-tabs {
        margin-top: 8px;
        margin-bottom: 8px;
    }

    .text-success {
        color: #2e7d32 !important;
    }

    .text-error {
        color: #d32f2f !important;
    }
</style>